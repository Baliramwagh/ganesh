Name: Raskar Suyash
Roll no: 529



#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
// size of array
#define n 10
int a[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
// Temporary array for slave process
int a2[1000];
int main(int argc, char* argv[])
{
int pid, np,
 elements_per_process,
 n_elements_recieved;
// np -> no. of processes
// pid -> process id
MPI_Status status;
// Creation of parallel processes
MPI_Init(&argc, &argv);
// find out process ID,
// and how many processes were started
MPI_Comm_rank(MPI_COMM_WORLD, &pid);
MPI_Comm_size(MPI_COMM_WORLD, &np);
// master process
if (pid == 0) {
 int index, i;
 elements_per_process = n / np;
 // check if more than 1 processes are run
 if (np > 1) {
 // distributes the portion of array
 // to child processes to calculate
 // their partial sums
 for (i = 1; i < np - 1; i++) {
 index = i * elements_per_process;
MPI_Send(&elements_per_process,
 1, MPI_INT, i, 0,
MPI_COMM_WORLD);
 MPI_Send(&a[index],
elements_per_process,
MPI_INT, i, 0,
MPI_COMM_WORLD);
 }
 // last process adds remaining elements
 index = i * elements_per_process;
 int elements_left = n - index;
 MPI_Send(&elements_left,1, MPI_INT,i, 0,MPI_COMM_WORLD);
 MPI_Send(&a[index],elements_left,MPI_INT, i,
0,MPI_COMM_WORLD);
 }
 // master process add its own sub array
 int sum = 0;
 printf("\nMaster Process (PID %d) -Elements: ",pid);
 for (i = 0; i < elements_per_process; i++){
 printf("%d ",a[i]);
 sum += a[i];
 }
 printf("\nSum : %d\n" , sum);
 // collects partial sums from other processes
 int tmp;
 for (i = 1; i < np; i++) {
 MPI_Recv(&tmp, 1, MPI_INT,MPI_ANY_SOURCE,
0,MPI_COMM_WORLD,&status);
 int sender = status.MPI_SOURCE;
 sum += tmp;
 }
 // prints the final sum of array
 printf("\nSum of array is : %d\n", sum);
}
// slave processes
else {
 MPI_Recv(&n_elements_recieved,
 1, MPI_INT, 0, 0,MPI_COMM_WORLD,&status);
 // stores the received array segment
 // in local array a2
 MPI_Recv(&a2, n_elements_recieved,MPI_INT, 0,
0,MPI_COMM_WORLD,&status);
// calculates its partial sum
 int partial_sum = 0;
 printf("\nThe Slave Process %d (PID %d) ", pid ,pid );
 for (int i = 0; i < n_elements_recieved; i++){
 printf("%d ",a2[i]);
 partial_sum += a2[i];
 }
 printf("\nPartial sum:%d \n", partial_sum);

 // sends the partial sum to the root process
 MPI_Send(&partial_sum, 1, MPI_INT,0, 0, MPI_COMM_WORLD);
}
// cleans up all MPI state before exit of process
MPI_Finalize();
return 0;
}



OUTPUT

//
it@it-HP-EliteDesk-800-G2-SFF:~/Desktop/505$ mpicc addition.c -o addition
it@it-HP-EliteDesk-800-G2-SFF:~/Desktop/505$ mpirun -np 1 ./addition
Master Process (PID 0) -Elements: 1 2 3 4 5 6 7 8 9 10
Sum : 55
Sum of array is : 55
it@it-HP-EliteDesk-800-G2-SFF:~/Desktop/505$ mpirun -np 2 ./addition
Master Process (PID 0) -Elements: 1 2 3 4 5
Sum : 15
Sum of array is : 55
The Slave Process 1 (PID 1) 6 7 8 9 10
Partial sum:40
it@it-HP-EliteDesk-800-G2-SFF:~/Desktop/505$ mpirun -np 3 ./addition
Master Process (PID 0) -Elements: 1 2 3
Sum : 6
The Slave Process 1 (PID 1) 4 5 6
Partial sum:15
The Slave Process 2 (PID 2) 7 8 9 10
Partial sum:34
Sum of array is : 55
it@it-HP-EliteDesk-800-
Master Process (PID 0) -Elements: 1 2
Sum : 3
Sum of array is : 55
The Slave Process 1 (PID 1) 3 4
Partial sum:7
The Slave Process 2 (PID 2) 5 6
Partial sum:11
The Slave Process 3 (PID 3) 7 8 9 10
Partial sum:34
it@it-HP-EliteDesk-800-G2-SFF:~/Desktop/505$ mpirun -np 5 ./addition
Master Process (PID 0) -Elements:
The Slave Process 1 (PID 1) 3 4
Partial sum:7
The Slave Process 3 (PID 3) 7 8
Partial sum:15
The Slave Process 2 (PID 2) 5 6
Partial sum:11
1 2
Sum : 3
The Slave Process 4 (PID 4) 9 10
Partial sum:19
Sum of array is : 55
*/